// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TSOL.DAL;

namespace ITSOL.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TSOL.Domain.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<bool>("IsRightAnswer");

                    b.Property<int>("QuestionId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("TSOL.Domain.Entities.ApplicationConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key");

                    b.Property<string>("Val");

                    b.HasKey("Id");

                    b.ToTable("ApplicationConfig");

                    b.HasData(
                        new { Id = 1, Key = "APP_NAME", Val = "ITSOL ONLINE TEST ENTRY" },
                        new { Id = 2, Key = "VERSION", Val = "V00.01" },
                        new { Id = 3, Key = "GETTING_STARTED_MENU", Val = "Getting started" },
                        new { Id = 4, Key = "ABOUT_COMPANY", Val = "<b>Html</b>" },
                        new { Id = 5, Key = "CONTACTS", Val = "<b>Html</b>" },
                        new { Id = 6, Key = "GETTING_STARTED_MENU_STEP_1", Val = "<b>Html</b>" },
                        new { Id = 7, Key = "GETTING_STARTED_MENU_STEP_2", Val = "<b>Html</b>" },
                        new { Id = 8, Key = "GETTING_STARTED_MENU_STEP_3", Val = "<b>Html</b>" }
                    );
                });

            modelBuilder.Entity("TSOL.Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("Birthdate");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<DateTime?>("LastActivateDate");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("Status");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Candidate");
                });

            modelBuilder.Entity("TSOL.Domain.Entities.CandidateQuizAssign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId");

                    b.Property<DateTime?>("DateExprire");

                    b.Property<DateTime?>("DateStart");

                    b.Property<int>("QuizId");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("QuizId");

                    b.ToTable("CandidateQuizAssign");
                });

            modelBuilder.Entity("TSOL.Domain.Entities.CandidateQuizAssignAndResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnsweredQuestionCount");

                    b.Property<int>("CandidateQuizAssignId");

                    b.Property<DateTime>("DateSubmited");

                    b.Property<float>("Mark");

                    b.Property<int>("RightQuestionCount");

                    b.Property<bool>("Status");

                    b.Property<int>("TotalQuestionCount");

                    b.Property<float>("WorkingTimeMinues");

                    b.HasKey("Id");

                    b.HasIndex("CandidateQuizAssignId");

                    b.ToTable("CandidateQuizAssignAndResult");
                });

            modelBuilder.Entity("TSOL.Domain.Entities.CandidateQuizAssignAndResultDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerSeletectedId");

                    b.Property<int>("CandidateQuizAssignAndResultId");

                    b.Property<DateTime>("DateSelected");

                    b.HasKey("Id");

                    b.HasIndex("AnswerSeletectedId");

                    b.HasIndex("CandidateQuizAssignAndResultId");

                    b.ToTable("CandidateQuizAssignAndResultDetail");
                });

            modelBuilder.Entity("TSOL.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int?>("GuessId");

                    b.Property<string>("Phone");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("TSOL.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("History");
                });

            modelBuilder.Entity("TSOL.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<bool>("IsMultiSelection");

                    b.Property<int>("QuizId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("TSOL.Domain.Entities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.Property<float>("TimeUpMinutes");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Quiz");

                    b.HasData(
                        new { Id = 1, DateCreated = new DateTime(2018, 12, 17, 21, 56, 28, 323, DateTimeKind.Local), DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "This is IQ quiz ", Name = "iq_01", Status = true, TimeUpMinutes = 20f, Title = "IQ Quiz 01" },
                        new { Id = 2, DateCreated = new DateTime(2018, 12, 17, 21, 56, 28, 323, DateTimeKind.Local), DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "This is java quiz", Name = "java_01", Status = true, TimeUpMinutes = 20f, Title = "Java Quiz 01" },
                        new { Id = 3, DateCreated = new DateTime(2018, 12, 17, 21, 56, 28, 323, DateTimeKind.Local), DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "This is .Net quiz", Name = "net_01", Status = true, TimeUpMinutes = 20f, Title = "NET Quiz 01" },
                        new { Id = 4, DateCreated = new DateTime(2018, 12, 17, 21, 56, 28, 323, DateTimeKind.Local), DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "This is english quiz", Name = "english_01", Status = true, TimeUpMinutes = 20f, Title = "English Quiz 01" },
                        new { Id = 5, DateCreated = new DateTime(2018, 12, 17, 21, 56, 28, 323, DateTimeKind.Local), DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "This is english Gmat", Name = "gmat_01", Status = true, TimeUpMinutes = 10f, Title = "Gmat Quiz 01" }
                    );
                });

            modelBuilder.Entity("TSOL.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<DateTime?>("LastActivateDate");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(2018, 12, 17, 21, 56, 28, 321, DateTimeKind.Local), Email = "emp1@email.com", Name = "emp1", Password = "123", Status = 1 },
                        new { Id = 2, CreatedDate = new DateTime(2018, 12, 17, 21, 56, 28, 323, DateTimeKind.Local), Email = "emp2@email.com", Name = "emp2", Password = "123", Status = 1 }
                    );
                });

            modelBuilder.Entity("TSOL.Domain.Entities.Answer", b =>
                {
                    b.HasOne("TSOL.Domain.Entities.Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("TSOL.Domain.Entities.CandidateQuizAssign", b =>
                {
                    b.HasOne("TSOL.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TSOL.Domain.Entities.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("TSOL.Domain.Entities.CandidateQuizAssignAndResult", b =>
                {
                    b.HasOne("TSOL.Domain.Entities.CandidateQuizAssign", "CandidateQuizAssign")
                        .WithMany()
                        .HasForeignKey("CandidateQuizAssignId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("TSOL.Domain.Entities.CandidateQuizAssignAndResultDetail", b =>
                {
                    b.HasOne("TSOL.Domain.Entities.Answer", "AnswerSeletected")
                        .WithMany()
                        .HasForeignKey("AnswerSeletectedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TSOL.Domain.Entities.CandidateQuizAssignAndResult", "CandidateQuizAssignAndResult")
                        .WithMany()
                        .HasForeignKey("CandidateQuizAssignAndResultId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("TSOL.Domain.Entities.Question", b =>
                {
                    b.HasOne("TSOL.Domain.Entities.Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
